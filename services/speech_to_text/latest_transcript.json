{"transcript": "Welcome to the ultimate. C++ course. In this course, you're going to learn everything you need to know about C++ from the basics to more advanced concept. So by the end of this course, you'll be able to write C++ code with confidence. If you're looking for a comprehensive, easy-to-follow well-organized and practical course that takes you from Zero to Hero. This is the write C++ course for you. You don't need any prior knowledge of C++ or programming in general, everything you need to know about.  C++ is in one place so you don't need to jump back and forth between random tutorials. My name is Masha, madani. I'm a software engineer with over 20 years of experience and have taught millions of people how to code through this Channel and my online school. Totally match.com. If you're new here, be sure to subscribe as I upload new videos all the time. Now, let's jump in and get started.  Before we start coding, let's spend a couple of minutes and talk about C++, what you can do with it and how to master it.  C++ is one of the most popular programming languages on the world and is the language of choice for building performance critical applications video games, device drivers web browsers, servers operating systems and so on. That's why it's used by large companies, like Adobe Google, Microsoft Netflix, and even government agencies, like NASA, just to name a few. Every three years we get a new version of C++ and the latest version at this time is version 20 the  This version is coming out next year. Now, there are people like our famous superstar developer, John Smith, who think that C++ is no longer relevant because of the newer languages like Java or C sharp. That is not true. C++ is still one of the fastest and most efficient languages available. So if you want to build an application that needs to be fast and use memory efficiently C++ is a great choice, this is an advantage that it has over languages like C, sharp and Java.  C++ is also one of the first languages often taught to computer science or software engineering students because it has influenced many programming languages like C, sharp Java, JavaScript, typescript Dart and so on. So if you're looking for a job as a software engineer learning, C++ is a great investment and opens a lot of doors for you. According to indeed.com, the average salary of a C++ programmer in the u.s., it's just over one hundred and seventy thousand dollars a year.  Now, to master C++, there are two things you need to learn. One is the C++ language itself, meaning the syntax, or the grammar of this language, the second thing you need to learn is the C++ standard library, or STL, which is a collection of pre-written C++ code that provides functionality. That is required by many applications, examples are data structures like lists and maps, and algorithms for searching and sorting data. These functions are required in almost  Application. So instead of us creating all this functionality from scratch, every single time, we can reuse some of the C++ code, in this library to quickly build applications in. This course, will explore major functionalities and the standard library, but the standard library is huge. So, will only scratch the surface. If you want to learn more, there are books specifically written on this topic. Now, a lot of people find C++ have been extensive and intimidating, but in reality, you don't need to learn all of  C++ to be able to write substantial programs for the same reason. You don't need to learn every feature. Your TV provides just to use and enjoy it. So in this course we're going to explore C++ step-by-step and as we go, I'm going to show you how you can write some really cool programs as you are learning. C++ plus I'm going to give you plenty of exercises to help you better understand. And remember the concepts, then you will see that C++ is not really that difficult. So, if you follow along by the end of this course, you'll  I'll be able to write C++ code with confidence. All right. Next, we're going to talk about the tools. You need to write C++ programs.   To create C++ programs, we use an integrated development environment or IDE which is basically an application that contains an editor for writing code as well as build and debugging tools. Now, there's so many different ideas out there. Some of them are free, the others are commercial, but the top three ones are Microsoft Visual Studio for Windows. The Community Edition is free. You can get it from the link on the screen there.  Is also a Mac version, but the one on the Mac is not really that great for Mac, you can use xcode, which you can get from the App Store. We also have sea lion, which is cross-platform. So it runs on Windows Mac and Linux, you can try it for free for 30 days, but then it requires a license. If you don't want to pay for a license, you can use one of the free Alternatives. Again, there's so many different ideas available for creating C++ programs. In this course I'm going to use Sea Lion but you don't have to use it to follow.  Along, you can use any tool you prefer because our Focus here is not on tooling, it's on the C++ language itself. Now, if you're an absolute beginner and you have never coded before, I recommend you to download the free version of sea lion, so you can easily follow along. And then later, you can either get a license or use one of the free Alternatives. So, head over to jetbrains.com / sea, lion, / download again, you can see we have versions for Windows Mac, OS, and Linux.  Just note that if you're on a Mac, make sure to download The Right DMG because here we have two different bills. One is for until the other is for apple silicone. So depending on the type of processor that your Mac uses, make sure to download The Right DMG because the difference in performance is significant, alright? So go ahead and install this in the next lesson we're going to create our first C++ program together.  So the first time you open sea lion, you're going to see this pop-up box for activating your license. For now, just select start trial. Now you need to login to your jetbrains account.  So over here, you can either sign in or create a new account, it's really simple. It's only going to take a minute or two, so I'm going to sign in with my account.  Good. Now, back to sea lion, we can start our trial.  Now on this page, we're going to click on new project. Now, on the top, we can specify the location of this project. So on my Mac is going to be on users, slash my name, / sea lion project, I'm going to call this project. Hello world. All in one word without any spaces. Okay, now over here we can specify the C++ language standard. So by default version 14 is selected, but we can change that to a higher version like 20 or  33. Now, because 23 is not official yet, I would suggest you to go with 20 good. Now, let's create this project.  Alright, here's our first C++ program written in a file called main.cpp. If you accidentally close it you can easily find it and the project window. So expand this folder and here is main.cpp. Now we have another file in this project called cmake list dot txt. We don't need that. So let's close it from here. Now, we have the same concept in other ideas, like Visual Studio or xcode. So we have a project and that project.  Contains a file that is the main file of our program. Now, let's close this window. I'm going to delete all this code because we're going to write it from scratch, so you understand how everything works. All right, let's start with a metaphor. Think of your TV, your TV has several functions. It has functions for changing the channel, controlling the volume and so on, by the same token, as C++ program consists of tens, or hundreds or thousands of functions each serving a purpose. Now, we have a special  It'll function here called main, which is the entry point to our program. This is like the power button of a TV, okay? Now note that C++ is a case sensitive language so it's sensitive to lower case and upper case letters. So make sure to type this exactly as I show you. So if you type a capital M here this is going to have a different meaning, okay? So we're defining a function. Now before the function name, we should specify the type of value. It's going to return this main function should return a value.  Of type int which is short for integer and that represents a whole number, like 1 2 3 4 and so on. So when we run our program, the operating system like Windows or Mac OS is going to execute this function and the value that this function returns tells the operating system if our program terminated successfully or not. Okay. So here we haven't followed by white space and then the name of the function. Now, white spaces in C++ are often ignored  So whether we have one or ten spaces, it doesn't really matter. But in terms of formatting, our code is better to go with one space because we want to format this code professionally, just like how we write an article. You want to format our code just like a published article. Okay? Now, after the function name, we type a pair of parentheses and inside the parentheses we can specify the parameters of this function. So the function can have zero or more parameters for now. Let's not worry about them will talk  About them later. Then we type a space again for proper formatting. Followed by a pair of braces, the inside the braces, we can type the code for this function. So, whatever we type here, will be executed when the operating system executes, our main function. Now, once again, in terms of formatting, there are two schools of thought, for adding the braces, some people like to add the left brace on the same line as the function. The other people like to put the left brain.  Us on a new line. There's really no right or wrong here. So whatever you prefer, just stick to that and make sure your code is consistent. In this course, I'm going to put the left brace on the same line where we Define a function, okay? Now, in this function, we want to write code to print something on the screen. And for that, we're going to use the C++ standard Library. So earlier, I told you that the standard Library provides a bunch of capabilities that we need in almost every application. So on the top,  We type hashtag include and in angle brackets. We specify the name of one of the files in the standard library. That is iao stream, which is short for input output string. In this file, we have capabilities or printing something on the screen or getting input from the user, so just like a supermarket has different sections. The standard Library also has different files, each serving a purpose. Now, as we go through the course,  We'll learn about the other files in the standard Library. Okay, so back to our main function, here we type STD that is short for standard library, and this is like a bucket or a container for the features that are currently available to us. So the features we have imported on the top. Okay, so if you type double colons, we can see all these features. Now, there are ton of features here, don't worry about any of them. In this lesson, we're going to use see out. That is short for  Our out. Some people think this is short for console out, that is not correct. So using this object, we can output one or more characters on the screen. So we type a space, followed by two left angle, brackets, and other space. And then in double quote, we type the text. We want to print on the screen, so hello world, okay, and then we terminate this line using a semicolon, just like how we terminate our sentences with a period. So in  Plus this line is called a statement because it tells the operating system what to do. So whenever we type a statement we should terminate it with a semicolon. Okay now finally we return the value of 0 and once again we need to terminate this with a semicolon but Y is 0. Well, 0 tells the operating system that our program is going to terminate correctly. If you return any other values, positive or negative, that means our program encountered, an error. Okay,  So let's quickly recap what we have done so far on the top, we included one of the files in the standard library for printing, something on the screen. Then we defined the main function, which is the entry point to our program. As you can see, the main function returns an integer, which is a whole number like 0, 1, 2 3. And so on, and in between the braces, we have written the code for this function. So, on the first line, we print something on the screen and on the  line, return the value of 0 as simple as that. This is your first C++ program. Next, I'm going to show you how to compile and run this program.   Now to run this program, first we have to compile this code to machine code that can be run by the computer's operating system. So the machine code is basically the native language that a computer's operating system understand and it's different from one operating system to another. So if we compile this code on a Windows machine, we get an executable but that executable only runs on Windows, we cannot run it on Mac or Linux. If you want to run our application on a Mac computer.  We have to take this code on a match and recompile it to get an executable from Mac, okay? So back to our code, to run this program, we're going to click on this play icon on the toolbar. Now, look at the shortcut on mac its control and are always use shortcuts because they make your life easier. So let's run this program.  We get this little window down the bottom. This is called the console or The Terminal window. It's basically a way to see that the output of our program. So over here, you can see the hello world message. So we're using a console application here because console applications are easier to create, especially for people learning a new language building applications with a graphical user interface or GUI is way more complex. So once you understand the basics of C++ you'll be ready to  Move on to writing applications with a graphical user interface if that's what you want. Okay? Now, let's minimize this window and make a tiny problem in this code. So I'm going to remove the semicolon now, let's rerun our program. All right. Look this time we get a compilation error pointing to this line. So the error is reminding us that we have forgotten a semicolon. If you are starting out is completely normal to encounter.  Arrows if you have a typo or miss a semicolon and so on, don't let that discourage you remember. Patience is the first skill of a good programmer, so if your code doesn't get compiled, pay close attention to this video. See what exactly I'm typing compared with your code. I promise if you pay close attention, you'll be able to solve issues on your own. So, let's fix the issue. All right, let's move on to the next lesson.   Now, going forward, I want to change the colors here and I wanted to show you how to do that, because a lot of people ask me about the themes I use in my videos. If you are not using sea lion, feel free to move on to the next lesson. So on the top, we go to the preferences menu, then under appearance and behavior. We select appearance, the over here. You can see the themes that are installed by default. We only have four themes but we can get more themes by clicking on this link.  Now on this page I'm going to sort this list by the number of downloads so we can see the popular want. I'm going to pick Dracula theme. It's a very popular thing but feel free to play with these themes and find the one that you personally like. So let's install this.  Except.  Good now. Okay, so this is the Dracula theme which is much better than the default theme that comes with sea lion so that brings us to the end of this section. In the next section we're going to talk about the basics of C++ so I will see you in the next section.   Now, let me give you a quick overview of how app structure this course. So you can get the most out of it. This course is the first part of my complete C++ series. Each part is about 3 to 4 hours long so you can easily complete it in a day or two in the first part, which is the one you're watching. We explore the basics. In this part, you will learn the fundamentals of programming in C++ data types decision, making statements loops and functions. Now, throughout the course, I'm going,  Give you plenty of exercises to help you develop your problem solving skills and build your confidence in writing code. In fact, many of these exercises are popular interview questions in the second part. We'll explore intermediate level Concepts such as arrays pointers strings, structures enumerations and screams. And finally in the last part, we'll be talking about the advanced concepts such as classes, exceptions, templates, containers are more  So by the end of this series, you will have a solid understanding of C++ and you'll be ready to apply it in real life. For example, if you want to build games with Unreal Engine, which is a popular gaming engine. You will have the necessary C++ skills to build games. You just need to learn about Unreal Engine. So, I hope you'll stick around and master C++, one of the fastest and most efficient programming languages available.  Hey guys, Mark here. I just wanted to say that you don't really have to memorize anything. In this course, I've put together a complete cheat sheet and summary notes for you that you can download as a PDF, right below this video. So click the link in the description to download this PDF so I have done my best to create the simplest C++ tutorial for you. So if you enjoyed this please support my hard work by liking and sharing this video and also be sure to subscribe as I upload new videos all the time.  Yeah.  Welcome back to the ultimate C++ course, in this section, we're going to talk about the basics of C++ will cover variables and constants naming conventions coding, mathematical, Expressions writing to, and reading from the console working with the standard library, and comments. So, by the end of this section, you'll be able to write simple, but really useful programs in C++. Now, let's jump in and get started.     Alright, let's talk about variables in programming. We use variables to temporarily store data in the computer's memory. Now technically a variable is the name of a location in memory where we can store some value now because the value can change, we refer to this location as a variable now, to declare a variable. In C++ first, we have to specify the type of data. We want to store, let's say end or integer for storing whole numbers. Then we give our very  Ball a proper meaningful name like file size, other various ways to name our variables. We have various conventions will talk about the momentarily once we declare a variable. Then we terminate this statement with a semicolon. Now I want to emphasize that you should always use meaningful names for your variables. Don't use abbreviations like FS because someone else, reading this code may not know what FS is short for also don't go for names, like F1 or F2.  Two or thing. These are all cryptic and ambiguous. Okay? So we're going to call this file size and then we can give it a value like 100. So we assign it, the value of 100. Now here, we can combine these two statements into a single statement and that makes our code shorter and more concise. So, right here where we declare our variable, we can give it an initial value of 100. This is called initializing a variable  Out, we don't need the second line, okay? Now let's declare another variable or storing numbers with a decimal point for that. We're going to use a different data type. That is double. We're going to talk about different data types in the next section. So in this section, we're only going to work with integers and doubles. Now we're going to call this sales and initialize it to 9.99, okay? Now that we have two variables, we can print them on the console. So instead of hello world,  Old, let's print file size, run our program, we see 100 beautiful. Now while initializing variables is not mandatory it's a good practice to follow let's see what happens if we don't initialise file size and printed on the terminal. Well immediately we see this morning, let's take a look. The warning saying variable file size is uninitialized. When used here initialize, local variable file size. So our ideas  Planning that you're using a variable that doesn't have an initial value. Let's run our program and see what happens. Take a look. Look, we get this random value and if we run our program multiple times, we see a completely different value, this is what we call garbage. This is the data that is currently in memory. So as a best practice, we should always initialize our variables before using them. So I'm going to set this to an initial value of 0. Now, in  Looks like C sharp or Java. We don't have to do this, if you declare an integer, it automatically gets initialized to 0, but this is not how it works in C++, okay? So this is how we can declare and initialize variables. And by the way, we can also initialise multiple variables on the same line. So over here, we can declare as second integer, let's call that counter. So we add a comma and then declare counter and optionally. We can initialize it to some value. Now while this  Works. It's often discouraged as a best practice. We should declare each variable on a separate line. So I'm going to remove this and declare another integer like this. Okay. Now I have a small exercise for you. I want you to write code to swap the value of two variables. This is a common interview question, so let me explain what I mean. We're going to declare two variables. A and B that if you print a, we're going to see one  Run on the terminal right now. Here's what I want you to do over here, I want you to write code to swap the value of these variables. So when we print a we see to and when we print B with c 1, now I don't want you to reset these variables. So I don't want you to set a 2 2 and B 2 1. This is not the right solution, let me give you a hint. Imagine instead of these two variables, we have two buckets. The first bucket is filled with apples.  The second bucket is filled with oranges. Now, if we have these two buckets in real life, how can we swap their content, think of a solution and then use that idea to write code, to swap the value of these variables? It's not that difficult just been a couple minutes on this and then come back. See my solution.  So, to solve this problem in real life, we need a third bucket. First, we empty our apples bucket into this bucket. Now, the apples bucket is empty, so we can move the content of the oranges bucket here. Now, the Orange is bucket is empty, so we can move the content of the third bucket into this bucket. Now, we have swapped the content of our pockets, right? So let's use this idea to solve this exercise, we declare a third variable. We can call that  tape and we initialize it with what we have in a that is the value of one. Now we can set a to be so whatever we have in B, which is 2 is now going to be in a and finally we're going to set B to Temp. So B is going to be 1. So now if we print a, we're going to see two instead of one. Let's verify this. So let's run our program. There you go. Beautiful. So this was your first programming problem, if you got stuck down,  Worry, it's completely normal as we go through the course, I'm going to give you more and more exercises to help you build your confidence. Next we're going to talk about constants.  There are situations where we don't want the value of a variable to change. This is where we use constant. Here is an example. Let's declare a variable of type double and call it pie and set it to 3.14. Now, with this, we can calculate the area of a circle, right? But what if somewhere in our program, I accidentally set pie to a different value like zero  With this, our calculations are going to go wrong, right? This is where we can use a constant to prevent the value of pi from changing. How do we do that? Very easy. We type the const keyword before declaring this variable. Now look on line five, we have a red underline that is a compilation error. So if you hover our Mouse here, we see the error saying cannot assign to variable pie with cons qualified, type constant double and also if  If you try to run our program here in the terminal window, we see an error. So take a look. This is the error. The error is happening in main.cpp on line, five and collimate. And here's the actual error cannot assign to variables pie with constant qualified type. Okay? So, this will prevent us from accidentally modify. The value of this variable, or more accurately constant.  Now, let's talk about naming conventions. So we have different conventions for naming our variables, and constants, and different teams, prefer different conventions. So there is really no right or wrong here. But let me show you the popular conventions. So earlier we declared a variable called file size. The way, we name this variable follows, what we call the snake case,  So with this convention, we have to use lowercase letters to name our variables and constants. And if you have multiple words, we should separate them using an underscore. Now, we have another convention called Pascal case in which we should capitalize the first letter of every word. So the same variable using Pascal case looks like this.  This is Pascal case. And by the way, the ticks that I put here that start with two forward slashes, this is called a comment. We'll talk about comments later in this section, but for now, just remember that, comment, our way to describe our code. They don't get compiled. Okay? Now we have another convention that is similar to Pascal case. The only difference is that the first letter of the first word should be lower case. So file size, this is camel case.  We also have Hungarian notation which is a pretty old notation and it's not relevant anymore with Hungarian notation. We should prefix the name of our variables with a letter that specify their type. So here we have an integer so we use a lower case I and then file size just like Pascal case, this is called a Hungarian notation.  That quite frankly, this is a very old notation. It's not relevant anymore, but I still see people using it. I've seen it a lot in Windows source code. The reason this is not relevant anymore is because in the old days we didn't have good editors so if you declared a variable somewhere and we wanted to know it's time. We had to scroll up to find the type of that variable. So with Hungarian notation we could look at a variable and immediately tell its time but this is not the case anymore because these days, we have powerful editors. If you  We hover our Mouse over any variable.  We can see it's type. So here you can see file size is an integer variable, right? So these are the popular conventions out there. In this course, I'm going to use camel case or naming our variables and constants and Pascal cases for naming. Our classes will talk about classes later in the course. Now, if you don't like these conventions and prefer to use snake case, that's totally fine. But make sure to stick to your own convention. The more consistent, your code is the easier it is to read, understand and maintain.  It. Next we're going to talk about mathematical expressions.  So you have learned how to declare variables and constants. Now let's see how we can write mathematical expressions for performing calculations. This is where the fun begins. So I'm going to declare two variables X and Y. Now we can declare a third variable and set it to X Plus y. So what we have here is called the addition, operator + x and y here are called operands. So now, let's print Z on the terminal. So,  STD double colon. See out Z. Take a look. So now we see 13, beautiful. We also have  Subtraction, multiplication and division. But division is a little bit tricky. In this case, because we are dealing with two integers, the result of the division is going to be an integer, even though in reality dividing 10, by 3 is going to result in a number with a decimal point, which we call a floating Point number in programming. So if you're on our program,  We see three. But what if you want to see a floating Point number? Well, changing, the type of Z 2. Double is not going to solve this problem because as I told you earlier, if both are numbers are integers, the result of the division is also going to be an integer. So to get a floating Point number, we have to convert one of these numbers to a double. So take a look, first, the warning goes away. Now if you're on our program one more time look.  If we get 3.3333. Okay, so, this is how division works in C++. Now, let me rewrite this back to integer and integer. Now, we have another operator called modulus which Returns the remainder of a division. So what is the remainder of division of 10 by 3? It's one, let's verify.  There we go. Okay, now using this operators, we can modify our variables. Let me show you what I mean. So for Simplicity, I'm going to remove y&z. We only have X and we're going to print it on the terminal. Let's say, we want to increment X by 5. Here's how we do it. We type x equals X plus 5. So first this piece of code or this expression is going to get evaluated, the result is 15 and then the result will be stored.  In X. Okay, now, similarly, we can subtract 5 from X, we can multiply X by 5 and so on. Okay, now we also have two more operators, you need to know and they are increment and decrement operators. So, let's say we want to add 1 to X. We can say x equals X Plus 1, that is totally fine. But there is a shorter and more concise way to write this code. We can say X plus, plus this is the increment operator we  Also have decrement operator but we don't have the equivalent for multiplication or division only increment and decrement. Okay. Now this increment operator, there are two ways we can apply it. We can operate as a post fix or as a prefix, let me show you the difference. So I'm going to delete if the Lions let's declare another variable called Y and set it to X plus plus if we apply this as a postfix. First the  Right value of x, which is 10, is going to be assigned to Y. So Y is going to be 10 and then X will be incremented by 1. So if you run our program, X is going to be 11, but why is going to be 10? Let me show you. So we print x x is 11 but if we print why  Why is going to be 10? Okay, so let me add this as a comment for clarity. In this case X is going to be 11 and Y is going to be 10. Now what if we applied the increment operator as a prefix so we declare another variable and set it to plus plus X. In this case, because we applied this operator as a prefix first, the value of x is going to be incremented by 1. So X is going to be 11. And then the  result will be stored in Zee.  So in this case, both x and z are going to be 11, let's verify. So if you print Z  So in this case, these 12 I made a mistake because in the previous statement we incremented X by 1. So if we comment out this line it's not going to get executed. So now when we run our program X is going to be 11 and Z is going to be 11 as well. Let's verify. So here you see beautiful and let's also print X.  There you go.  So here's what you need to take away. If you apply the increment or decrement operator as a prefix first, this piece of code is going to get evaluated. So first X is going to be incremented by 1 and then the result is going to be stored in the other variable, in contrast, if you apply this, operator as a post fix first, the current value of x, which is 10, is going to be stored in y, and then X is going to be incremented by 1.  Hey guys, Marsh here. I hope you have been enjoying this tutorial so far. I just wanted to let you know that this tutorial is the first hour of my complete C++ Series where you will learn everything you need to know from the basics to more advanced concepts. So watch this tutorial to the end and if you still want to learn more use the link below this video to enroll in the full course. The complete course contains three parts each part being around 3 to 4 hours long so you can complete them in a day or two.  You will also get a certificate of completion and a 30 day money back guarantee. Again, if you're interested, the link is below this video in the description box.  Been writing mathematical Expressions especially the more complex ones you need to take into account the order or priority of operators. Let me show you what I mean. So I'm going to declare a variable called X and set it to 1 plus 2 times 3. Now, let's print X on the console. What do you think we're going to get, pause the video and think about it for a second.  The answer is 7. This is a very simple math question, but unfortunately a lot of people get it wrong. Here's the reason in math, the multiplication and division operators, have a higher order or a higher priority. So when evaluating this piece of code or this expression, first this part is evaluated. So 2 times 3 is 6 and then 6 is added to 1. So the result is 7, let's verify. So I'm going to run the program. There you go.  We have seven. Okay, so here's what I want you to remember in math or any programming languages.  The multiplication and division operators, always have a higher priority than addition or subtraction operators, but we can always change the order of this operators using parentheses. So in this case, if we wrap this piece of code with parentheses first, this piece is evaluated. So 1 plus 2 is 3, and then 3 is X 3. So the result is going to be  E9. Let's verify so run the program one more time. There you go. Okay, the here is your exercise for this lesson. Take this mathematical expression and implement it in C++ assume X is 10. And Y is 5. So if you implement this correctly, Z is going to be one point three. So pause the video and work on this for a couple minutes. Then come back. See my solution.  All right, here's the solution. I'm going to declare X and set it to 10, then why we set it to 5 + 4 Z. First, we have to add 10 to X, but we have to wrap this in parentheses because this whole thing is going to be our numerator. Once we have the numerator, then we're going to divide it by 3 times y. But here's the tricky part, we have to wrap this whole expression in parentheses because the result of this expression  Shawn is going to be our denominator. If you don't use parentheses here, our denominator is going to be 3 and the result is going to be different. So we wrap this whole thing in parentheses and now let's print Z on the terminal. So we should get 1 Point 3. Again, if you didn't solve this properly, don't worry, don't let that discourage. You remember, you're a student, you're learning. If you know everything and you could solve every problem, you would be the one teaching, right?  So, don't let that discourage you, and let's move on to next Liza.  So, you have learned how to write to the console, or The Terminal window. In this lesson, I'm going to show you a few more techniques or writing to the console. So, let's start by declaring a variable. Now, let's say on the terminal, we want to print x equals 10. How do we do this? Well, first, we go in the STD namespace and pick up, see out, which is an object, that represents  Standard output stream. I know it's a mouthful but let me explain for you in programming a stream. Represent a sequence of characters the standard output is our console or terminal window. So using C out. We can write a sequence of characters on the standard output which is our console window right now, these double left angle bracket are called The Stream insertion. Operator. It's an operator for inserting something to our output stream.  This case, we're going to write a sequence of characters, which we specify using double quotes then programming or C++ specifically. This is called a string will talk about strings later in the course. So here I'm going to print x equals and right after we want to print the actual value of x. So we terminate this statement and you see out one more time, but this time, we print X. Okay, let's run our program and see what we get.  So we see X is 10 beautiful. Now we can combine these statements into a single statement. So we get rid of the second C out and this semicolon and then put everything on the same line. Now we are chaining multiple stream insertion operators so if we run our program, one more time we get the exact same result. Beautiful. Now, what if we declare a second variable so  Let's declare Y and set it to 20 and then repeat. So one more time, see out, y equals and then we add y, take a look. All right, here's what we get. But wouldn't have been nicer if y equals 20 was on the second line? Well, to solve this problem right here, we need to add a new line. So once again, we chained the stream insertion operator.  And this time you go in the STD namespace, and pick up and dull, which represents the end of the line. Okay, now, let's run our program one more time,  That is much better. Okay. Now once again, we can simplify this code by combining these two statements so again we don't need the second C out so let's remove that and it's semicolon as well. Now if we run our program,  We get the exact same result. However, our code is not formatted properly, it's a little bit hard to read this code. So here, I'm going to use tabs and spaces to align this operators. So, what we have in our code, looks exactly like what we expect in the output. Okay, this is better. Now, there is a tiny problem. In this code, we have a bit of repetition of STD double colons. So we have repeated this in two places. Let me show you how to simplify this code. So,  For our main function, we use the using directive to pick up the STD namespace. So here, we type namespace STD. Now it's tedious defined anywhere in this file, so we don't have to repeat it in multiple places. So we can simply access all objects in the STD namespace. So, let's remove that and this one as well. And finally, let's realign.  Is bracket great. So now our code is cleaner more concise and easier to read great. Here's your exercise. Imagine, you have a store and you have made ninety five thousand dollars. Now, that's part of your tax return. You have to pay state and County tax at different rates. So, state taxes for percent, whereas County taxes 2%. Now, I want you to write code to show your total sales as well as your state tax, your county tax and the total tax, you have to pay on this income. So  Pause the video and work on this exercise for 5 minutes then come back. See my solution.  All right, here's my solution. First, we need a variable or storing the total sales and for that. I'm going to use a double. So even though we don't have any scent values here, but for monetary values, we should always use a double. So double sales equals ninety five thousand now. Right after. Let's print, the total sales here we add a dollar sign. That's nicer. Then we chain the insertion operator to print sales followed by.  The end of line. Now before going, any further, let's run our program and make sure everything works. So run total sales is ninety five thousand dollars great.  Next we need to calculate the state tax so let's declare another variable called state tax and here we get sales and multiply it by point zero four and then once again we print this on the terminal. So state tax is this value followed by the end of line.  Now, once again, let's run our program and make sure everything works. So this is how I want you to write code. Write a bit of code. Run it make sure everything works before going further, baby steps. So Ron  Sorry, state tax is 3800. Great. Now, let's improve this code. The first thing I want to improve here is formatting. So the first two lines are about the total sales, whereas the second two lions are about the state tax. These are two different stories, right? So here I add a vertical line to separate these stories. Just like how we have multiple paragraphs. In an article, we want to write our code. So every story is separated from other stories or  Okay, so here's our state tax, then I add another vertical line to separate it from the return statement, great. Now, this line is totally fine, but generally speaking, it's best to avoid magic numbers like this here, because even though this is a very simple example, in more complex programs, these magic numbers might be confusing. Someone else, reading your code, may not know what that number represents. So, here we can make our code more expressive by storing this  You in a separate variable so we declare a variable called state tax rate and City 2.0 for and then we can reference that variable right here.  Now it's completely clear. What this value represents. It's our state tax rate, but this has another benefit. If we use this variable in multiple places, in our code and then tomorrow, the estate tax changes, we don't have to come back and modify multiple places. We have a single place where you have stored this value, okay? Now there is a tiny problem in this code. The problem is that I can accidentally change the state tax rate.  How can we solve this problem using a constant? So we qualify this with the const keyword, that's better. Now we have to repeat the same three lines for our County tax. So I'm going to copy this and paste it. And again note the vertical line this is to separate these stories. So over here  we're going to rename this to County tax rate, which is going to be two percent. And over here, we're going to calculate the County tags.  And print, it accordingly.  County tax, good, nothing new that. We should also replace state tax rate with County tax rate. So, let me show you a shortcut here. Look, I haven't typed County tax rate, I just typed kind of an abbreviation. So count T are, so we can use abbreviations to quickly type our code and press enter to complete it. Okay. Now, let's run our program, make sure everything works.  So our County tax is 1900 beautiful. Now, the final part we declare another variable called total tax, which equals State Tax Plus County tax, and finally we printed on the terminal,  Total tax. Okay, so once again, see how I've named my variables, all the variables are properly named their meaningful. There is no ambiguity in this code. We don't have t, 1, T, 2 T are whatever, don't write code like that. Next we're going to talk about reading input from the user.  All right. Now let's see how we can read input from the console. So you have learned that see out represents the standard output string. Now, in this file in iostream, we have another object called seeing which represent the standard input stream which we can use for reading data from the console. Let me show you how first we're going to use the out to print a label on the screen. So,  So, enter and value.  Now using see in, we can read that value and put it in a variable, but first we need to declare a variable. So let's declare an integer called value. Then we use see in along with the stream extraction operator to read that value and put it in this variable. Okay. So this is called the stream extraction operator, it's the opposite of stream insertion operator. I know, it can be confusing but the easiest way to remember this  Is to think of the direction of data flow. So, in this case, we have reading data from the console or the standard input and putting it into this variable, in contrast, with see out, you're basically getting this sequence of characters and putting them into the console. So this is the way to remember this. Okay, now, to verify that our program works,  Let's print the value that we just read. So let's run our program.  Enter value, let's say 10 and we get 10 in the output beautiful. Now what if we enter a floating Point number and number with a decimal point let's see so this time I'm going to enter 10 .1  The decimal part is gone because with declared this value as an integer. So if you want to read a floating Point number here, we have to use the double type. Take a look. So one more time, 10.5. Now we get 10.5 beautiful. Now, we can also read multiple values. So let's change this label to enter values for X and Y. Now, let's declare two variables called.  And why first we read X and then we read Y and finally we can print X Plus y. This is like a simple calculator. So take a look, we can enter 10 and 20 and the result is 30. Now we can also separate these numbers using a space and the program will still work. Take a look. So one more time, ten space, it doesn't matter one or more spaces.  We add the second number and we get the same result. Okay, now, similar to see out here, we can chain these statements together so we can get rid of the second statement and chain, the stream extraction operator to read the second value. So look, we start from the console, you read something, and put it in X, then we read something else and put it in. Why it's exactly like before. But our code is shorter. So this is how we can read input from the  Console. Now, as your exercise, I want you to write a program for converting temperatures from Fahrenheit to Celsius. So when you run your program the program should ask the user to enter a temperature in fahrenheit and then it should convert it to Celsius and printed on the terminal. So pause the video and spend a few minutes on this then come back. See my solution.  All right, here's the solution is pretty easy. First, we, you see out to print a label like Fahrenheit.  Then we declare a variable or storing the temperature in fahrenheit. All right, height next using seeing we read that value and put it in this variable.  Then we declare a variable of type double called Celsius. The reason I'm using a double here is because the conversion might result in a floating Point number. So, here's the formula. Fahrenheit - 32, we wrap this in parentheses and then divide it, by 1 Point 8.  The finally using C out, we print the temperature in celsius. Now, let's test our program. So 90 in Fahrenheit is equivalent to 32.2 in Celsius   So you have seen that the standard Library gives us the capability to read from or write to the console. Now, in this lesson, we're going to look at a different part of the standard library that gives us several useful, mathematical functions. So on the top we're going to use the include directive. One more time to include a file called. See math, this file declares a bunch of useful, mathematical functions. If York,  Curious what this functions are just go to Google and search for see math reference, there are many different websites that give you a C++ reference. One of them is C++.com. The other is CPP reference.com, and so on. So as an example, let's look at this page.  So over here, you can see all the functions declared in the sea math, library. In this lesson, we're going to look at a couple of them. One of them is Seal which rounds up a value. The other is floor, which rounds down in value. If you click on any of these functions, you can learn more about it. So, on the top, you can see different versions of c and C++ so C90 and c99 represent the old C language. C++ 98 is one of the early versions of  Plus plus that came in year 1998 then we have C++ 11 that was released in your 2011. So you can see how this function has evolved over different versions of C or C++ that don't get hung up too much about these details. All I want you to pay attention to here is that this function takes an input of type double and returns another double. So, let's see this in action. So, back to the code,  Here in the main function to use the floor function, we type floor followed by a pair of parentheses and then we Supply the input value which is called an argument. So we pass, one point two. Now we get a double value that we can store in a variable. So let's declare a variable of type double called result and set it to the return value of the floor function. And then we terminate this statement with a semicolon, the over here.  We say that we are calling the floor function which means we are executing it, you're giving it a value and getting a new value. Now, we can print the result just like before and the result is 1. Okay, now some functions take multiple values or multiple arguments. One of them is the power or power function. So, let's take a look.  Pow requires two arguments human, it to pass two values separated by comma. So, if we say 2 comma 3, that means 2 to the power of 3. Now, when we type this sea lion adds, these labels, LCP underline X, and LCP underline. Why? These are the name of the parameters of this function. So, sea lion adds this to make our code a bit more understandable? Okay, now, if you run this, we get  88. Okay. Now as an exercise, I want you to write a program that asks the user to enter the radius of a circle, and then it should print the area of a circle. It's pretty easy. You can knock it out in a couple of minutes.  All right, here's my solution. First, puc out to print a label enter radius, then we declare a double variable called radius. Next, we will see in to read the value, the user enters into this variable. Now we declare another variable called area. And here we have to use the old formula pi times R to the power of 2. So we can type the pie number here. But earlier I told you that  To avoid magic numbers as much as possible. So we're going to store this value pie and a separate variable.  Or even better. We can make this a constant. Okay, now we can say area equals pi times. This is where we use the power function to get radius to the power of 2 as simple as that. Now finally, we you see how to print the area. Let's test our program so if we enter  For the area is 50-point 24.   Alright, the last thing we're going to cover in this section is comments. We use comments to clarify our code and to make it easier to understand. As I told you before comments, don't get compiled. Now, in C++, we have a couple of different ways for writing comments. We can start with two forward, slashes, and whatever we type in front of these lashes would be considered a comment. Now, we can add this lashes.  The line or in front of it either way works. But as you can see here, we have limited space because we're basically bound to what is left here. Of course, we can write a longer comment, but then we'll have to constant. You scroll to the left, one to the right to see what is going on. So it's more conventional to write the comment above a line. Now, if you want to have multiple lines, again, we can start a new line of comment like this. Okay. Now in C++, we have another way for writing.  A multi-line comment instead of two forward, slashes. We start with a forward slash and an asterisk and then press enter. Now, sea lion, automatically generate this block of comment, these two characters represent the beginning of the block and these two characters represent the end of the comment block, what we put in between will be considered a multi-line comment. Now, different teams have different preferences in terms of which style of comments should be used. So there is really no.  Right or wrong here, just pick one style and stick to it. Now, one thing I want to emphasize about comments is that you should not overuse them because they make your code harder to understand and maintain. So you should use comments only to explain wise and house. Not what? Let me show you what I mean. So here I can write a comment and say declare a variable and initialize it to 0. Well, it is obvious, that that's what we're doing on the next line. So this comment is  completely unnecessary and it's making our code a little bit verbose. We don't want to sprinkle our code with all these kinds of unnecessary comments. Instead, we should use comments to explain. Why is and house if he made certain assumptions while writing this code, we should comment those assumptions. So, in the future, when we come back, we see why we did things in a certain way. Okay? So, that's all about comments, and that brings us to the end of this section. So, I will see you in the next section.  Welcome back to the ultimate C++ course, in this section we're going to explore the fundamental data types. In C++ in detail will talk about various built-in types, as well as their size and limits more specifically. We'll explore various types for representing numbers and their differences. You will learn how to generate random numbers which is a very useful technique, especially for building games, you will also learn how to work with Boolean values, characters and strings, as well as  Arrays, which we use for storing a list of values. So, by the end of this section, you will have a deep understanding of these fundamental data types and how to use them to write useful programs. So now let's jump in and get started.  So you have seen that in C++ to declare a variable we need to specify its type. That's why we say C++ is a statically typed language, meaning when declaring a variable we need to specify its type and this type cannot change throughout the lifetime of our program other examples of statically. Typed languages are C, sharp Java typescript, and so on in contrast to  Directly type languages, we have dynamically, typed languages like python JavaScript and Ruby in these languages. We don't have to give our variables, a particular type, the type will be determined based on the value that we assigned to these variables and that type can change throughout the lifetime of our program. Okay? So that is a difference between statically and dynamically typed languages. Now in C++ we have a bunch of different built-in data types. So far. You have only seen in  And double. But we have more built-in types that we're going to cover in this section. In this lesson I'm going to give you a basic overview of these types. But as we go through this section, you'll become more familiar with this types. So, for storing whole numbers, we have in t, which takes four bytes of memory on most systems. This is not a hard and fast rule, depending on the implementation. The number of bytes taken by an integer can vary from one system to another. But for the most part you can assume that an integer takes four bytes  Memory in four bytes, we can store numbers from minus 2 billion, 2, plus 2 billion. Now, if you want to store a smaller number, we don't need to waste four bytes of memory. So we can use the short type, which takes two bytes of memory. And into B, we can store the values from minus 30 2002, plus thirty-two thousand. Now for storing larger numbers. We have long, which is often the same as ENT on most systems and long long, which takes eight bytes of memory.  And allows us to store, really large numbers. Speaking of experience, most of the time you'll be using short or in types, unless you're working on programs that involve complicated, mathematical computations. Now for numbers with decimal places which we call floating Point numbers, we have double which you have seen so far. The double type takes eight bytes of memory. Now we also have float which takes four, bytes of memory and long double which takes eight bytes of memory as well again.  Most of the time you would be using double especially for storing monetary values because the flow type can result in loss of accuracy. Now, we also have the Bull type for storing true and false values. They're often used to represent a condition like is this person eligible for a loan or not? We also have another built-in type called Char or storing single characters, so that was a basic overview of the fundamental data types in C++ again as we go through this section.  Ian will explore this types in more detail.   Now, that you're familiar with the basic built-in types in C++. Let's look at a few different ways to declare and initialize variables. So I'm going to start by declaring a double called price, and we're going to set this to 99.99. Nothing new so far. But what if we want to declare a float? Well we can declare a float called interest rate and we set it to 3.67 and here at the end we type the letter F that is short for float.  This is really important because if you don't typ this by default, the compiler will treat this number as a double. And then it will try to store a double inside a float variable, and this can potentially cause data loss. So, when working with float values, always type and F at the end, it can be uppercase or lowercase, it doesn't really matter. Now, there is another reason we should type this letter will come back to this shortly. Now, let's declare a long, so long file size.  We can set this to 90,000 now, similar to the flow type here, we should add the L suffix, because if you don't typ this, the compiler will treat this number as an integer. So to force the compiler to treat this as a long, we type either an uppercase or lowercase L. Now the lowercase L can be confused with the number one so the best practice is to use a capital l, okay?  Now let's declare a variable for storing a character. So we CH are letter and here we use single quotes to represent a character like a, okay? And finally let's look at a Boolean.  We're going to call this is valid, and we can set it to true or false. These are the acceptable values for bullion's. Now, with any of these types, we can also use the auto keyword to let the compiler infer. The type of our variables. For example, if we change bull to Auto and then hover our Mouse over is valid.  Look, the compiler knows that is valid is of type Bool. Similarly, if we change chart to Otto,  And look at the type of this variable, we can see it's of type chart. Now here's the interesting part, if we change long to auto,  We can see that file size is of type long because we added the letter L at the end if we don't type this and use the auto key word. Look, file size is treated as an integer. So that is why we need to add this suffix. Similarly, for float, if we use Auto, now we can see interest rate is afloat, but if you remove the suffix, it will be treated as a  Double, right? So this is the benefit of using the auto key word. It kind of makes our code shorter and more consistent. You don't have to use it if you don't like it. But the other key word is particularly useful. When working with more complex types, we'll look at that in the future. There is one more way to initialize variables in modern C++ that you need to know, and that's called brace initialization. So, let me delete all this code and declare an integer called number and set it to 1 Point 2.  The here we get a warning because we have a yellow underlined by our code still gets compiled. So if we print number and run our program, we see the fraction part is gone, and we see one. Okay. Now, there's another way to initialize this variable and prevent this kind of scenario where we assign the wrong value to a variable. So instead of the assignment operator, we use braces. So we put this value inside braces now.  Look, we have a compilation error because we have a red underline, so our code is not going to get compiled. The brace, initializer stops us from making such mistakes. Now, there is another benefit to using brace initialization if you don't Supply a value here, our number variable will be initialized to 0. So if you run this program,  With the number is zero. However, if you remove the empty initializer here and run our program, again we can see we get this random value which we say it's garbage. And every time we run our program, we get a different value. So this makes our programs unpredictable, so we should either initialize our variables, using the assignment operator, to a proper value or we should use and empty brace initializer.   In math and programming. We have different number systems that serve different purposes in our day-to-day life. We use decimal or base 10 numbers, which can contain digits, 0 to 9, but computers, don't understand these digits. They only understand zeros and ones. That's why we have the binary or base-2 system. So a number in this system can only contain zeros and ones. Now, we can take any number and represent it as a binary. For example, the number 255 in the  Decimal system is equivalent to eight ones in the binary system. It's a very long number. That's why we use the hexadecimal or base 16 numbers to shorten binary numbers. A hexadecimal number can contain the digits 0 to 9, as well as the letters a to f. As you can see, hexadecimal numbers are more compact. Now, in programming we use hexadecimal numbers to represent colors. You probably heard of RGB or red green blue colors you  seeing only six digits of a hexadecimal number. We can represent any color. That's very useful. We don't have to deal with really large decimal or binary numbers. Now, let's see how we can represent these numbers in C++. So I'm going to declare an integer called number and City to 255. Now, if you want to represent this number in the binary system, we type 0 b as a prefix and then we type a binary number. I'm going to type 8 ones so. One, two, three, four,  Four, five, six, seven, eight. Now let's print the number. Take a look, we get to 55. Okay now we can represent the same number in the hexadecimal system so instead of 0 B, we type 0 x. And then we type A hexadecimal number in this case, double F which can be uppercase or lowercase, it doesn't really matter. Let's run our program one more time.  Look, we get the same number beautiful. Now, most of the time I would say, 99% of the time we use decimal numbers, but depending on the kind of application you're building in some situations, you may want to represent a number as binary or hexadecimal, okay? Now, irrespective of how we represent numbers are, numbers can be positive or negative if you're dealing with a positive number, we don't have to type a positive sign. It's assumed by default, but for negative numbers, obviously, we have to type  - now in C++ we have a special keyword called unsigned. If you apply this to a numerical type, that type cannot accept negative values. Now, on the surface, you might think this is a good value, but it can actually cause programming problems that are hard to spot. For example, let's print this number on the console and see what we get. So, we get this really large positive number.  As another example, we might initialise this number 20 and then somewhere else in our program, we might tikaram at this number. Now, if you print this instead of negative 1, we're going to get this really large. Positive number. So my suggestion is to stay away from the unsigned keyword just because you plus plus has this feature doesn't mean you should use it. That's why earlier in the course I told you that you don't need to learn all of C++, all of its features to build useful and substantial.  Apps. So stay away from the unsigned keyword.   When working with numbers a concept, you need to understand is narrowing and that happens when you initialize a variable of a smaller type using a larger type, here is an example. Let's declare an integer called number and set it to 1 million.  Now to make this code more readable, we can separate these digits using a single quote, that's better. Now, let's declare a short called another and set it to number. Now, we immediately get this warning saying narrowing conversion from int to sign type short is implementation defined, I know it's a mouthful. Basically, the morning is saying that because we're converting an integer to a short. This conversion is a narrowing conversion. So it's going to  result in narrowing down our number, which is 1 million. So now if we print another and run our program with this 16,000, this is the result of narrowing conversion. Now obviously, if we use a brace in initializer here,  You could prevent this our code wouldn't even get compiled. So this is another benefit of the brace initializer, okay? Now, what if we do the opposite? What if we declare is number as short?  And put it in an integer. The in this case, we have a warning because this number is too large to fit in a short variable. Because as I told you earlier, using the short data type, we can store numbers from - 30 2002 plus thirty two thousand. So let's change this to let's just say 100  And then put it in an integer. Now we can use the brace initializer or the assignment. Operator doesn't really matter. Let's run our program.  We get 100. So the opposite is not an issue. So the short type takes two bites, the integer takes four bytes, if you store a smaller number and the larger memory space, we're not going to encounter data loss. So the additional bytes in memory are going to be filled with zero.  All right, let's see how we can Generate random numbers in C++. This is very useful. We can use random numbers in creating games that involve rolling a dice card or other elements. So we have a function called brand that is defined in a library called, see stdlib.h. So on the top, we need to include another file from the standard Library called, see,  See STD lib. Okay, now we call this function and get a random integer. So let's do it here and then print it on the terminal now. Let's run this program.  So this is a number I get on your machine. You're probably going to get something different. Now, here's the thing, every time we run this program, we get the exact same number. The reason for this is that these numbers are not really random. They're basically based on some kind of mathematical formula. So to get a random number, we need to see the random number generator with a different value. Let me show you what I mean, so, we have another function called Esther, and that is short for  Seed Rand, if you seed the random number generator with the value of five, now we get a different random value. But again, every time we run this program, we get the exact same random number, if you see this with a different number,  Now, a random number is going to be different. So how can we get truly random numbers? Well, we have a function for getting the current time in terms of the number of seconds elapsed from January 1970. If we use that function, every time we run our program, we're going to get a different number. Let me show you  So first on the top, we need to include another file called, see time in this file, we have a function called time that Returns the current time in terms of number of seconds elapsed from January 1st 1970. Now, to call this function we have to give it a special argument called null pointer or not PTR. We'll talk about this later in the course, if this is too confusing for you just use the number zero.  Let's see, lion, it's going to give us a warning, don't worry about that, it's just adjusting to use null pointer. Now this returns a long value, which is elapsed second. So to see this in action instead of printing a random number and let's print the elapsed s, if we run our program,  This is the number of seconds elapsed from January 1st 1970. Now, every time we run our program we get a different value, right? So we can use this to see the random number generator. So instead of hard coding, the number 6, we can use elapsed s. Now we generate a random number and printed on the terminal. Take a look.  So every time we run our program, we get a different random number great. But this random number is way too large. What if you want to specify an upper limit? Well over here, where we generate a random number, we can use the modulus operator and specify the upper limit. So if you type 10 that's going to return the remainder of division by 10 so that can only be numbers 0 to 9, right? Take a  So now we have to if we run our program again we get 93 and so on beautiful.  Now we have a warning here under rad. The warning saying, the Rand function has limited Randomness use C++ 11 random Library instead. So in C++ 11, we have a different way for generating, random numbers, but that's more complicated, it's not suitable for beginners. So, for now this is a good way for you to learn how to generate random numbers. Now we can make this code a little bit more concise. In this case, we don't really need this variable elapsed second because anyone  Familiar with C++ knows that time of zero or time of null pointer Returns the current time in terms of number of elapsed seconds so we can grab this function and pass it as an argument to the SR and function. And now we don't need this extra variable so this function will return a value and that value is going to be passed to this function as an argument, okay? So this is how we can Generate random numbers in C++.  So now, as an exercise, I want you to write a program to roll a dice. So, every time we run this program, we should get two random values between 1260 to limit the range of the random number use. This formula on the screen, you will see my solution next.  All right, let's look at my solution. So on the top, we are including three files, iostream CSD, the lip and see time in the main function. We are sitting the random number generator with the current time now to generate a random value, we're going to use the formula I showed you earlier, so we call the Rand function and then get the remainder of division by this expression. Our maximum value is 6, our minimum value is 1.  One. And then we need to add 1 to it. The someone else looking at this code, will probably have no idea what these numbers represent. That's why I told you that you should avoid magic numbers. So this is a great opportunity to use a constant. So we Define two constants constant integer.min, value of 1 and constant, integer, max value of 6. The here, we can use the short type because we don't really need to store large numbers here. So  Better at use the short time to save system resources the memory. So we have two constants. Now, instead of hard-coding, these magic numbers, we use are constants and this makes our code more readable and easier to understand. Okay? So using the modulus operator, we get the remainder of division by this expression. Now, we need to wrap the whole thing in parentheses and add the minimum value to it. This will give us a random number between  In 126 so we can store it in a variable called die one or first, whatever you prefer then we need to duplicate this and create a second variable called s.  And finally we can print everything using see how. So first here we chain the stream insertion operator, we can add a comma and the second variable. Now, let's run our program.  So we get three and four one more time, five and six six and six beautiful.  We have reached the end of this tutorial. Again, as I said, this tutorial is the first hour of my complete C++ Series. So if you want to learn more use the link below this video to enroll, and please support me by liking and sharing this video. Thank you so much and have a fantastic day. "}